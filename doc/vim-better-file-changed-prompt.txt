*vim-better-file-changed-prompt.txt*	Prompt Improvement	2024 Dec 22

VIM BETTER FCP ðŸ—¯ File-Changed Prompt with "Load File" as Default ~

BETTER FILE CHANGED PROMPT		*vim-better-file-changed-prompt*

1. About This Plugin			|vim-better-file-changed-prompt-about|
2. Prompt Differences			|vim-better-file-changed-prompt-differences|
3. Types of File Changes		|vim-better-file-changed-prompt-types|
4. Reference				|vim-better-file-changed-prompt-reference|
5. So, like, _Why?_			|vim-better-file-changed-prompt-why|
6. Related Projects			|vim-better-file-changed-prompt-related-projects|

==============================================================================
1. About This Plugin			*vim-better-file-changed-prompt-about*

This plugin adjusts the default file-changed prompt.

- You probably don't need this plugin it you're happy with |autoread|.

  - If you're running Vim, |autoread| is not enabled by default.

    - Run `set autoread` and be happy.

  - If you're running Neovim, you're all set.

But if you want a few quality of life improvements,
sure, maybe check out this plugin!

- For vim-gtk and MacVim, it makes the prompt a
  little less wordy.

  - For MacVim specifically, it hints at how to use
    the somewhat confusing UX ("there are two buttons
    highlighted in blue â€” so what does pressing <Enter>
    do??")

- It adds additional alerts where (Neo)Vim is otherwise
  silent.

  - For example, when |autoread| is enabled, if a buffer
    is unchanged but its external file changes, Vim loads
    the changes and prints a message.

    But in Neovim, nothing is printed.

    This plugin restores that message.

Project page: https://github.com/embrace-vim/vim-better-file-changed-prompt#ðŸ—¯

==============================================================================
2. Prompt Differences			*vim-better-file-changed-prompt-differences*

By default, Vim prompts you if a buffer you're working on
was changed by an external program.

Here's a look at the default prompt on macOS in MacVim:
  https://macvim.org/ >

  " Mac users can run this command from Vim to open the image:
  :call system('open ' .. expand('%:h') .. '/MacVim-FCS-prompt--builtin.png')
<
If you're not familiar with macOS dialog wiring:

- The button with the -blue background- is picked
  when you press <Enter>.

- The button with the -blue border- is picked when
  you press <Space>.

- You can move the selected button with <Tab>.

  - Regardless of the selected button, <Enter> will
    -always- pick the "OK" button.

- There are no accelerators defined (e.g., nothing like
  the <Alt-L> you can use on Linux).

This plugin changes the prompt thusly: >

  " Mac users can run this command from Vim to open the image:
  :call system('open ' .. expand('%:h') .. '/MacVim-FCS-prompt--better.png')
<
The prompt text is also less wordy than the default,
and you'll also see a helpful little hint added to
remind you how <Enter> and <Tab>/<Space> work on macOS.

- And if you've read |W11| help once, you probably
  don't need to be reminded of it every time.

In the other Vims â€” Linux GVim, terminal vim, and terminal
nvim â€” you'll see similar changes to the prompt.

==============================================================================
3. The different types of Vim file changes	*vim-better-file-changed-prompt-types*

Vim identifies at least six different types of changes:

- The file on disk was deleted while a buffer is open.

- The file timestamp was changed.

- The file permissions were changed.

- The file contents were changed, but the buffer has
  not been |modified|.

- The file contents were changed and the buffer has
  local modifications.

- The file on disk was -created- after a buffer with
  that path was opened.

  - This is actually a different prompt altogether
    that is not scriptable (|W13|).

How this plugin handles each of those file changes ~

If Vim notices that a file is deleted while a buffer is open,
it alerts, `E211: File "{filepath}" no longer available`,
but it doesn't prompt.

- If the file is created again, Vim doesn't announce it,
  unless the local buffer has changes.

  - So this plugin emits a message when the deleted file
    has since been _undeleted_.

If Vim notices that only the timestamp has changed, you
won't notice. It will ignore the event and move on.

- But it will notify this plugin. And it'll print a
  short |message| to bleep you, but it won't prompt
  you.

- For those users that also use git-rebase, this
  event occurs frequently when you rebase history.

If Vim notices that the permissions have changed,
the default is to always prompt you.

- This plugin will not prompt you when permissions
  change. [Although maybe it should, or at least if
  the file is no longer writable or readable by the
  user. But that's a rare use case we're not gonna
  worry about. But please open an Issue if this
  impacts you negatively]:

  https://github.com/embrace-vim/vim-better-file-changed-prompt/issues

If Vim notices external changes and the local buffer
has not been modified, it'll print a message like you'd
normally see when you edit a file, e.g.,: >

  "file" 3L, 9B
<
- Interestingly, in Neovim, nothing is messaged. Neovim
  silently loads changes.

- This plugin prints an alert like Vim does, but telling you
  explicitly what happened (unlike, e.g., `"file" 3L, 9B`),
  and colorfully, too (imagine the following with a yellow
  background, for example), e.g.,: >

  File changed! ðŸ“  /path/to/file
<
Finally, when conflicts are detected, this plugin will prompt
you, just like Vim or Neovim does, regardless of `autoread`,
albeit with the dialog changes described earlier.

==============================================================================
4. Reference				*vim-better-file-changed-prompt-reference*

Relevant Vim documentation for the *endlessly curious*:

- |FileChangedShell|

- |v:fcs_choice|

- |v:fcs_reason|

- |timestamp|

- |autoread|

- Vim Tip: File no longer available - mark buffer modified, by Ewfalor, 2008:

  https://vim.fandom.com/wiki/File_no_longer_available_-_mark_buffer_modified

  - This tip provides a simple |FileChangedShell| hander that was the basis
    for this project's file-changed handler:

    https://github.com/embrace-vim/vim-better-file-changed-prompt/blob/release/autoload/embrace/fcs_handler.vim

==============================================================================
5. So, like, _Why?_			*vim-better-file-changed-prompt-why*

I originally made this plugin because I wanted to be prompted
when external changes happened, even if there was no conflict,
so that I could choose what to do. But I wanted the default
choices to be opposite Vim's â€” e.g., if `set noautoread` and
Vim shows the conflict prompt, the default is to Keep Changes,
but I wanted the default to be Load File.

- So when no conflicts, I wanted to be able to hit <Enter> to
  load changes.

- But when there were conflicts, I wanted to be able to hit
  <Enter> to ignore changes.

Nowadays, I prefer `autoload` behavior â€” not to be prompted
when there are external changes but not conflicts, but to just
load changes â€” but I also like the additional messages provided
by this plugin.

==============================================================================
6. Related Projects			*vim-better-file-changed-prompt-related-projects*

- `interuptless.vim` â€” Makes vim interrupt you less

  https://github.com/vim-utils/vim-interruptless

- `vim-autoread` â€” Have Vim automatically reload a
  file that has changed externally

  https://github.com/djoshea/vim-autoread

 vim:tw=78:ts=8:ft=help:norl:
